---
title: "Plots"
format: html
editor: visual
---

First, we create the physeq object,

```{r}
###----Load packages----

library("phyloseq"); packageVersion("phyloseq")
library("ggplot2"); packageVersion("ggplot2")
library("tidyverse"); packageVersion("tidyverse")

###----Import data----
set.seed(42)
source('create_physeq.R')
```

Now, we ordinate:

```{r}
(physeq_nmds <- ordinate(physeq_rel, method = "NMDS", distance = "bray"))
```

Now, we configure format:

```{r}
source('../scripts/configuration_format.R')
```

## Shepard plots -all

```{r}
# Shepard plot - all
vegan::stressplot(physeq_nmds)
```

## NMDS plot

```{r}
physeq_rel
physeq_p
```

```{r}

plot_nmds <- function(x, ...){
  y <- ordinate(x, method = "NMDS", distance = "bray")
  plot_ordination(x, y, ...)+
  geom_point(size=3)+
  theme_bw()+
  theme(legend.title = element_blank())+
  theme(strip.background = element_rect(fill="white" ))+
  stat_ellipse()
}

nmds <- list(
  all = plot_nmds(
    physeq_rel,type ="samples", color = "layer",shape = "age"
    ),
  phyla = plot_nmds(
    physeq_p, type ="samples", color = "layer", shape = "age",
    ),
  class = plot_nmds(
    physeq_c, type ="samples", color = "layer", shape = "age",
    )
)

plot_grid(nmds$all, nmds$phyla, nmds$class)
```

```{r}
plot_ordination(
  physeq_rel, physeq_nmds,
  type ="samples", color = "layer",shape = "age"
  )+
  geom_point(size=3)+
  theme_bw()+
  theme(legend.title = element_blank())+
  theme(strip.background = element_rect(fill="white" ))+
  stat_ellipse()
```

## Richness plot

```{r}
###----Richness all----

richness_plot <- plot_richness(
  physeq, x="layer", color =  "depth",
  measures=c("Observed","Shannon","Simpson","InvSimpson")
  )
richness_plot <- richness_plot + geom_boxplot(
  data = richness_plot$data, aes(color = NULL), alpha = 0.05)+
  theme_bw()+
  theme(legend.title = element_blank())+
  theme(legend.position = "right") +
  theme(strip.background = element_rect(fill="white" ))
richness_plot
```

## Stacked bar plots

```{r}
physeq_mean_rel_phylum <- physeq_mean_rel |>
  tax_glom(taxrank = "Phylum") |>
  transform_sample_counts(function(x) x/sum(x)*100) 
```

Since we get too many phyla to plot in a stacked barplot, we will filter the low abundant ones and put them into one category. To do this, we will use the power of tidyverse again. First, we will create a normal data frame out of the phyloseq object and then add another column where all taxa with abundance lower than 1% will be renamed to "\< 1%".

```{r}
#transform phyloseq object to a data frame (DF)
physeq_mean_rel_phylumDF<- psmelt(physeq_mean_rel_phylum)

#make the phyla characters, not factors
physeq_mean_rel_phylumDF$Phylum <- as.character(physeq_mean_rel_phylumDF$Phylum)


#there are some reads that were assigned only to the kingdom level, 
# i.e. NA on the phylum level, so we will rename them
physeq_mean_rel_phylumDF <- physeq_mean_rel_phylumDF %>% 
  mutate(Phylum = replace(Phylum, Phylum == "NA", "unassigned"))

physeq_mean_rel <- transform_sample_counts(physeq_mean_rel, function(x) x/sum(x)*100)       #careful when duplicates // /sum(x)*100

# add new column with renamed low abundant taxa
physeq_mean_rel_phylumDF <- physeq_mean_rel_phylumDF %>% 
  mutate(Phylum2 = replace(Phylum, Abundance < 3, "< 3%"))

#reorder the phyla so that they are stacked according to abundance
physeq_mean_rel_phylumDF$Phylum <- reorder(physeq_mean_rel_phylumDF$Phylum2,
                                           physeq_mean_rel_phylumDF$Abundance)

n_phyla <- length(levels(physeq_mean_rel_phylumDF$Phylum))

stacked_plot <- physeq_mean_rel_phylumDF |>
  ggplot(aes(depth, Abundance, fill=Phylum)) +
  geom_bar(stat = "identity") +
  theme_bw()+
  labs(x= "depth [cm]",y= "Relative abundance [%]",
     fill= "Phyla")+
  scale_fill_manual(values = get_wants_hue(n_phyla))+
  theme(legend.position="bottom") +
  scale_x_continuous(breaks = seq(10, 100, 10))
stacked_plot    
```

https://wilkelab.org/cowplot/articles/plot_grid.html

```{r}
final <- plot_grid(stacked_plot, richness_plot,nrow = 2,labels = c("A", "B"))

save_default(final, filename="test.pdf")

```

## ANOVA

First, create objects and metadata (change to numeric when necessary)

```{r}
library("microbiome"); packageVersion("microbiome")
library("vegan"); packageVersion("vegan")

otu1 <- microbiome::abundances(physeq)
meta1 <- microbiome::meta(physeq)|>
  mutate(
    depth = as.numeric(depth),
    SOM = as.numeric(SOM),
    pH = as.numeric(pH),
    H2O = as.numeric(H2O),
    age_num = as.numeric(age_num)
     )
```

Let's now inspect depth:

```{r}

permanova_depth <- vegan::adonis(
  t(otu1)~depth, data = meta1, permutations=999, method = "bray"
  )
print(as.data.frame(permanova_depth$aov.tab))

```

Now age:

```{r}
permanova_age <- vegan::adonis(
  t(otu1)~age, data = meta1, permutations=999, method = "bray"
  )
print(as.data.frame(permanova_age$aov.tab))
```

Now layer:

```{r}
permanova_layer <- vegan::adonis(t(otu1)~layer, data = meta1, permutations=999, method = "bray")
print(as.data.frame(permanova_layer$aov.tab))
```

Now SOM:

```{r}
permanova_SOM <- vegan::adonis(t(otu1)~SOM, data = meta1, permutations=999, method = "bray")
print(as.data.frame(permanova_SOM$aov.tab))

```

H20

```{r}
permanova_H2O <- vegan::adonis(t(otu1)~H2O, data = meta1, permutations=999, method = "bray")
print(as.data.frame(permanova_H2O$aov.tab))
```

```{r}
permanova_pH <- vegan::adonis(t(otu1)~pH, data = meta1, permutations=999, method = "bray")
print(as.data.frame(permanova_pH$aov.tab))

```

Finally, age_num:

```{r}
permanova_age_num <- vegan::adonis(t(otu1)~age_num, data = meta1, permutations=999, method = "bray")
print(as.data.frame(permanova_age_num$aov.tab))
```

PCoA with age:

```{r}
dist <- vegan::vegdist(t(otu1), method="bray")
mod_age <- vegan::betadisper(dist, meta1$age, type="centroid")
mod_age
mod_age$age <- meta$age
TukeyHSD(mod_age)
```

PCoA with layer:

```{r}
mod_layer <- vegan::betadisper(dist, meta1$layer, type="centroid")
mod_layer
mod_layer$layer <- meta$layer
TukeyHSD(mod_layer)
```

Plot for age with eigenvalues:

```{r}
get_eigenvalue <- function(mod, number, digits = 2){
  mod |> pluck('eig', number) |>
    round(digits) |> 
    format(nsmall = digits)
}
x_label <- paste0('PCoA 1 (eigenvalue = ', get_eigenvalue(mod_age, 1), ')')
y_label <- paste0('PCoA 2 (eigenvalue = ', get_eigenvalue(mod_age, 2), ')')
par(mfrow = c(1,2))
plot(
  mod_age,  hull=FALSE, ellipse=TRUE,
  main = "PCoA, age", sub=NULL,
  col=c("#2f85fe", "#e05436", "#009453"),
  cex=2, lwd=1,
  xlab = x_label,
  ylab = y_label
  ) #+
```

Plot for layer with eigenvalues:

```{r}
get_variance <- function(mod, number, digits = 2){
  variance <- mod$eig[number]/sum(mod$eig)*100
  variance |>
    round(digits) |> 
    format(nsmall = digits)
}
x_label <- paste0('PCoA 1 (', get_variance(mod_layer, 1),'%)')
y_label <- paste0('PCoA 2 (', get_variance(mod_layer, 2),'%)')
par(mfrow = c(1,2))
plot(
  mod_layer,  hull=FALSE, ellipse=TRUE,
  main = "PCoA, layer", sub=NULL,
  col=c("#2f85fe", "#e05436", "#009453"),
  cex=2, lwd=1,
  xlab = x_label,
  ylab = y_label
  ) #+
```

```{r}
boxplot(
  mod_layer$distances ~ mod_layer$group,
  main= "Distance to Centroid",
  xlab="layer", ylab="Distance",
  col= c("#2f85fe", "#e05436", "#009453")
  )
par(mfrow = c(1,1))
# dev.off()
```

First, we can plot 95% confidence levels:

```{r}
plot(TukeyHSD(mod_layer))
```

We can add p-values from Tukey Test to the box plot of the distances:

```{r}

get_pos_whisker <- function(x){
  # Calculate whisker position
  hinge <- as.numeric(quantile(x, probs = 0.75))
  upper_max <- hinge +IQR(x)*1.5 
  x |> 
    keep(~ . < upper_max) |>
    max()
}
# Calculate label position
pos <-  c(
  by(mod_layer$distances, mod_layer$group, get_pos_whisker)
  )

# Custom label
custom_label <- c('A', 'V', 'AV', 'T2')

tibble(
  distances = mod_layer$distances,
  group = mod_layer$group,
) |>
  ggplot(aes(x = group, y = distances, fill = group))+
  geom_boxplot()+
  geom_text(
    data = data.frame(
      distances = pos,group = names(pos),label = custom_label
      ),
    aes(label = label),
    hjust = -1, vjust = -0.5
    )+
  xlab('Layer')+ylab('Distance to Centroid')+
  theme(
    legend.position = 'None'
  )



```

This code will extract automatically the correct labels

```{r}
library(magrittr)
tukey <- TukeyHSD(mod_layer)
tukey_label <-   data.frame(
    label = rownames(tukey$group)[which(tukey$group[,'p adj']< 0.05)]
  ) |>
  separate(label,sep = '-', into = c('from', 'to'),remove = T) %$%
  data.frame(from = c(from, to), to = c(to, from)) |>
    group_by(from)|>
    summarise(label = paste0(to, collapse = ','))|>
  column_to_rownames('from')|>
  pull(label)

```
