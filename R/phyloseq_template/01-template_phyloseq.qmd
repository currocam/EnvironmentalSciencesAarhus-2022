---
title: "Phyloseq analysis template"
author: "Curro Campuzano"
format:
  html:
    toc: true
    toc-location: left
    embed-resources: true
editor: visual
---

# Setting up the enviroment

If it's the first time you use this notebook, please follow this steps:

1.  File -\> Open project ... and select "EnvironmentalSciencesAarhus-2022/R/R.Rproj
2.  You can pull from GitHub for latest modifications (either in terminal using `git pull` or Rstudio Git menu.
3.  Set up environment using `renv` .

```{r}
#|label: renv-set

renv::status()
renv::restore()
```

Notice that this notebook is a template. We provide dummy data as an example (mainly as reference for formatting issues).

## OTU Analysis

This interactive notebook is made with Quarto. Quarto enables you to weave together content and executable code into a finished document. To learn more about Quarto see <https://quarto.org>.

```{r}
#|label: dependencies
#|message: false
#|warning: false
#|echo: false
if (!require("BiocManager")){install.packages("BiocManager")}
if (!require("phyloseq")){BiocManager::install("phyloseq")}
if (!require("tidyverse")){install.packages("tidyverse")}
if (!require("devtools")){install.packages("devtools")}
if (!require("pairwiseAdonis")){devtools::install_github("pmartinezarbizu/pairwiseAdonis/pairwiseAdonis")}
if(!require("microbiome")){BiocManager::install("microbiome")}

library(tidyverse)
library(phyloseq)
library(microbiome)
library(vegan)
library(magrittr)

```

## Aesthetics configuration

Please skip this chunk if you want to use the default values. These are Nature's guidelines for generating figures and they look very nice for printing (credits to Palle Villesen). Feel free to edit those by editing that script file.

```{r}
#| label: configuration_format
#|message: false
#|warning: false
#|echo: false
source("configuration_format.R")
```

# Preparing data

## Reading OTU table and taxonomic csv

We are assuming that you have csv files (separated with ","):

```{r}
#|label: read-files
OTU_CSV <- "otu_dummy.csv"
TAXA_CSV <- "taxa_dummy.csv"

otu <- read_csv(OTU_CSV) |>
  phyloseq::otu_table(taxa_are_rows = TRUE)
taxa <- read_csv(TAXA_CSV) |>
  #readr::read_delim(TAXA_CSV, delim = ";") |>
  as.matrix() |>
  phyloseq::tax_table()
```

## Reading metadata table

```{r}
meta <- readr::read_csv("metadata_dummy.csv")|>
  tibble::column_to_rownames(var = "rowname")|>
  phyloseq::sample_data()
```

## Creating `phyloseq` object

Now, we combine OTU table, taxonomy table and metadata into a `phyloseq` object.

By assigning a variable inside () we print a summary.

```{r}
#|label: phyloseq
(physeq <- phyloseq(otu, taxa, meta))
```

## Dealing with taxonomic categories

We will remove the SILVA prefix, anything labelled "unknown" (this will not affect abundances) and replace spaces with underscores.

```{r}
#|label: prepro-taxa
# Remove prefix
tax_table(physeq) <- gsub("Unknown.*", "", tax_table(physeq))

silva_prefix <- c(
  "k__", "p__", "c__", "o__", "f__", "g__", "s__"
)
tax_table(physeq) <- silva_prefix |>
  paste(collapse = "|") |>
  gsub("", tax_table(physeq))


```

You may want to do some custom data cleaning here:

```{r}
#|label: taxa-clean
tax_table(physeq) <- gsub("incer*ae sedis*", "", tax_table(physeq))
physeq <-physeq |>
  subset_taxa(
    Kingdom != "Apusozoa kingdom incertae sedis" | is.na(Kingdom)& 
    Kingdom != "Calypogeia muelleriana (Chloroplast)"| is.na(Kingdom)& 
    Kingdom != "Elliptochloris bilobata (Chloroplast)"| is.na(Kingdom)& 
    Kingdom != "Carex siderosticta (Chloroplast)"| is.na(Kingdom)& 
    Kingdom != "Cryptomycota Holomycota kingdom incertae sedis"| is.na(Kingdom)& 
    Kingdom != "Breviatea kingdom incertae sedis"| is.na(Kingdom)
    )
```

```{r}
#|label: summary-taxa

physeq |>
  tax_table()|>
  as.data.frame()

```

## Making unique OTU labels

First, we define the following function in order to create the new unique labels:

```{r}
#|label: makeTaxLabel
makeTaxLabel <- function(physeq){
  tax_table(physeq) |>
  as.data.frame() |>
  dplyr::mutate(
    dplyr::across(dplyr::everything(),~ na_if(.,""))) |>
  purrr::transpose() |>
  purrr::map_chr(~as.character(.x) |> na.omit() |> tail(1)) |>
  make.unique()
}
```

Now, we assign these new labels:

```{r}
#|label: asisgn_new_labels
taxa_names(physeq) <- makeTaxLabel(physeq)
```

After merging, we need to dived the numbers to the number of replicates, in this case "3"

```{r}
physeq_rel <- transform_sample_counts(physeq, function(x) x/sum(x)*100)
sample_sums(physeq_rel)
```

# Inspecting data

Now, we can inspect the resulting tables (see @tbl-otu and @tbl-taxa).

```{r}
#| label: tbl-otu
#| tbl-cap: "OTU table"

physeq |>
  otu_table()|>
  as.data.frame()
```

```{r}
#| label: tbl-taxa
#| tbl-cap: "Taxonomic table"

physeq |>
  tax_table()|>
  as.data.frame()
```

Check if everything looks good:

```{r}
#|label: sample_sums
sample_sums(physeq)

sample_names(physeq)

rank_names(physeq)

sample_variables(physeq)
```

```{r}
#|label: sample_names
sample_names(physeq)
```

```{r}
#|label: rank_names
rank_names(physeq)
```

```{r}
#|label: sample_variables

sample_variables(physeq)
```

You will probably want to transform sample counts too (code copied from Maria's work)

```{r}
#After merging, we need to dived the numbers to the number of replicates, in this case "3"
physeq_rel <- transform_sample_counts(physeq, function(x) x/sum(x)*100)
sample_sums(physeq_rel)

#reating rel counts per depth
physeq_mean_rel <- merge_samples(physeq_rel, "depth")             # this is what will be depicted in the graph later

#After merging, we need to dived the numbers to the number of replicates, in this case "3"
physeq_mean_rel <- transform_sample_counts(physeq_mean_rel, function(x) x/sum(x)*100)       #careful when duplicates // /sum(x)*100
sample_sums(physeq_mean_rel)
head(tax_table(physeq_mean_rel))
```

# Data analysis

## Perform an ordination using Nonmetric Multidimensional Scaling

Now, we ordinate using the NMDS method and bray distance. NMDS performs a Non-metric MultiDimenstional Scaling of a sample-wise ecological distance matrix onto a user-specified number of axes, k (in this case 2).

```{r}
#| label: ordination 
(physeq_nmds <- ordinate(physeq_rel, method = "NMDS", distance = "bray"))

```

## Goodness of Fit and Shepard Plot for Nonmetric Multidimensional Scaling

Now, we find the goodness of fit measure for the points in the previous nonmetric multidimensional scaling. The Shepard diagram is shown in @fig-stressplot .

```{r}
#| label: fig-stressplot 
#| fig-cap: A plot of ordination distances and monotone or linear fit line against original dissimilarities.
vegan::stressplot(physeq_nmds)

```

Now, we'll create a function for a) ordinate and b) plot. This way we'll be able to plot for different subsets of taxa at the same time.

```{r}
#| label: fig-NMDS
#| message: false
plot_nmds <- function(x, ...){
  y <- ordinate(x, method = "NMDS", distance = "bray")
  plot_ordination(x, y, ...)+
  geom_point(size=3)+
  theme_bw()+
  theme(legend.title = element_blank())+
  theme(strip.background = element_rect(fill="white" ))+
  stat_ellipse()
}

nmds <- list(
  all = plot_nmds(
    physeq_rel,type ="samples", color = "layer",shape = "layer"
    ),
  phyla = physeq_rel |>
    tax_glom(taxrank = "Phylum", NArm = FALSE) |>
    plot_nmds(
      type ="samples", color = "layer", shape = "layer"
      ),
  class = physeq_rel |>
    tax_glom(taxrank = "Class", NArm = FALSE) |>
    plot_nmds(
      type ="samples", color = "layer", shape = "layer"
      )
)
```

You can plot each plot individually:

```{r}
nmds$all
```

Or use plot_grid for a list of plots:

```{r}
plot_grid(plotlist = nmds)
```

## Richness plot

```{r}
###----Richness all----

richness_plot <- plot_richness(
  physeq, x="layer", color =  "depth",
  measures=c("Observed","Shannon","Simpson","InvSimpson")
  )
richness_plot <- richness_plot + geom_boxplot(
  data = richness_plot$data, aes(color = NULL), alpha = 0.05)+
  theme_bw()+
  theme(legend.title = element_blank())+
  theme(legend.position = "right") +
  theme(strip.background = element_rect(fill="white" ))
richness_plot
```

## Stacked bar plots

```{r}
physeq_mean_rel_phylum <- physeq_mean_rel |>
  tax_glom(taxrank = "Phylum") |>
  transform_sample_counts(function(x) x/sum(x)*100) 
```

Since we get too many phyla to plot in a stacked barplot, we will filter the low abundant ones and put them into one category. To do this, we will use the tidyverse again. First, we will create a normal data frame out of the phyloseq object and then add another column where all taxa with abundance lower than 1% will be renamed to "\< 1%".

```{r}
physeq_mean_rel_phylumDF <- physeq_mean_rel_phylum |>
  #transform phyloseq object to a data frame (DF)
  psmelt()|>
  #make the phyla characters, not factors
  mutate(Phylum = as.character(Phylum))|>
  #there are some reads that were assigned only to the kingdom level, 
  # i.e. NA on the phylum level, so we will rename them
  mutate(
    Phylum = replace(Phylum, Phylum == "NA", "unassigned"),
    Phylum2 = replace(Phylum, Abundance < 3, "< 3%")
    )|>
  #reorder the phyla so that they are stacked according to abundance
  mutate(
    Phylum2 = reorder(Phylum2, Abundance)
  )
```

Now, we plot the stacked plot. You can change colors editing function get_wants_hue. Default is optimized for colorblindness.

```{r}
n_phyla <- length(levels(physeq_mean_rel_phylumDF$Phylum2))

stacked_plot <- physeq_mean_rel_phylumDF |>
  ggplot(aes(depth, Abundance, fill=Phylum2)) +
  geom_bar(stat = "identity") +
  theme_bw()+
  labs(x= "depth [cm]",y= "Relative abundance [%]",
     fill= "Phyla")+
  scale_fill_manual(values = get_wants_hue(n_phyla))+
  theme(legend.position="bottom") +
  scale_x_continuous(breaks = seq(10, 100, 10))
stacked_plot 
```

You can obtain figures with more than one plot using plot_grid. For example:

https://wilkelab.org/cowplot/articles/plot_grid.html

```{r}
final <- plot_grid(
  stacked_plot, richness_plot,nrow = 2,labels = c("A", "B")
  )
save_default(final, filename="test.pdf")

```

## ANOVA

First, create objects for microbiome package:

```{r}

(otu_microbiome <- microbiome::abundances(physeq))
(meta_microbiome <- microbiome::meta(physeq))
```

Now, we use adonis for those variables we are interested. We should probably use adonis2, because adonis have been deprecated.

```{r}

permanova_depth <- adonis2(
  t(otu_microbiome)~depth,
  data = meta_microbiome,
  permutations=999, method = "bray"
  )
permanova_depth

```

Now layer:

```{r}
permanova_layer <- adonis2(
  t(otu_microbiome)~layer,
  data = meta_microbiome,
  permutations=999, method = "bray"
  )
permanova_layer
```

If you have several "models", consider a more general approach using lists:

```{r}
adonis2_formulas <- list(
  layer = t(otu_microbiome)~layer,
  depth = t(otu_microbiome)~depth
)
permanovas <- adonis2_formulas |>
  map(
    adonis2, data = meta_microbiome,
    permutations=999, method = "bray"
    )
permanovas
#permanovas$layer
```

## Multivariate homogeneity of groups dispersions

```{r}
# Calculate distance
dist <- vegan::vegdist(t(otu_microbiome), method="bray")
# betadisper is a multivariate analogue of Levene's test for homogeneity of variances
mod_layer <- vegan::betadisper(
  dist, meta_microbiome$layer, type="centroid"
  )
mod_layer$layer <- meta_microbiome$layer
```

## TukeyHSD

```{r}
(tukey_test <- TukeyHSD(mod_layer))
```

```{r}
plot(tukey_test)
```

## PCoA with variance in axis

```{r}
get_variance <- function(mod, number, digits = 2){
  variance <- mod$eig[number]/sum(mod$eig)*100
  variance |>
    round(digits) |> 
    format(nsmall = digits)
}
x_label <- paste0('PCoA 1 (', get_variance(mod_layer, 1),'%)')
y_label <- paste0('PCoA 2 (', get_variance(mod_layer, 2),'%)')

par(mfrow = c(1,2))
plot(
  mod_layer,  hull=FALSE, ellipse=TRUE,
  main = "PCoA, layer", sub=NULL,
  col=c("#2f85fe", "#e05436", "#009453"),
  cex=2, lwd=1,
  xlab = x_label,
  ylab = y_label
  ) #+
```

## Boxplot of distances with pvalues from Tukey Test

We can add p-values from to the box plot of the distances:

```{r}

get_pos_whisker <- function(x){
  # Calculate whisker position
  hinge <- as.numeric(quantile(x, probs = 0.75))
  upper_max <- hinge +IQR(x)*1.5 
  x |> 
    keep(~ . < upper_max) |>
    max()
}
# Calculate label position
pos <-  c(
  by(mod_layer$distances, mod_layer$group, get_pos_whisker)
  )

# You can run the next line for calculating automatically the
# labels based in p-values.
tukey_label <-   data.frame(
    label = rownames(tukey_test$group)[which(
      tukey_test$group[,'p adj']< 0.05
      )]
  ) |>
  separate(label,sep = '-', into = c('from', 'to'),remove = T) %$%
  data.frame(from = c(from, to), to = c(to, from)) |>
  group_by(from)|>
  summarise(label = paste0(to, collapse = ','))|>
  column_to_rownames('from')|>
  pull(label)

# However, for this data, there is no significance difference 
# between groups. We can still plot those labels as example:

custom_label <- c('A', 'V', 'AV', 'T2')

tibble(
  distances = mod_layer$distances,
  group = mod_layer$group,
) |>
  ggplot(aes(x = group, y = distances, fill = group))+
  geom_boxplot()+
  geom_text(
    data = data.frame(
      distances = pos,group = names(pos),label = custom_label
      ),
    aes(label = label),
    hjust = -1, vjust = -0.5
    )+
  xlab('Layer')+ylab('Distance to Centroid')+
  theme(
    legend.position = 'None'
  )



```

## Annotating NMDS with information from permanova

-   "Numbers on the top indicate the stress values.

-   Asterisks represent the significance level of PERMANOVA (∗adjusted P \< 0.05 or ∗∗adjusted P \< 0.01)"

First, we extract information from permanova

```{r}
(
  r2_label <- permanova_layer$R2[[1]] |>
  round(2) |>
  format(nsmall = 2)
)
(
p_value_label <- permanova_layer$`Pr(>F)`[[1]]%>%
  {case_when(
    . < 0.01 ~ "**",
    . < 0.05 ~ "*",
    . >= 0.05 ~ "",
    )}
)
```

```{r}
original_plot <- plot_ordination(
  physeq_rel, physeq_nmds,
  type ="samples", color = "layer",shape = "layer"
  )+
  geom_point(size=3)+
  theme_bw()+
  theme(legend.title = element_blank())+
  theme(strip.background = element_rect(fill="white" ))+
  stat_ellipse()+
  theme(legend.position="bottom")

original_plot +
  annotate(
    geom="text",
    x = max(original_plot$data$NMDS1) + 0.4,
    y = max(original_plot$data$NMDS2),
    label= r2_label,
    size = 5
    )+
  annotate(
    geom="text",
    x = max(original_plot$data$NMDS1) + 0.4,
    y = min(original_plot$data$NMDS2),
    label= p_value_label,
    size = 10
    )
```
